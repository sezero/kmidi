dnl Template file for GNU Autoconf
dnl Process this file with autoconf to produce a configure script.
dnl (C)Copyright 1998 by Hiroshi Takekawa <t80679@hongo.ecc.u-tokyo.ac.jp>

dnl modified for automake by Isaku Yamahata <yamahata@kusm.kyoto-u.ac.jp>
dnl modified for automake by Masanao Izumo <mo@goice.co.jp> (1998.11)


EXTRACFLAGS=
EXTRADEFS=
EXTRALIBS=
SYSEXTRAS=

AC_CHECK_HEADER(string.h,, [ EXTRADEFS="$EXTRADEFS -DNO_STRING_H " ])

dnl
dnl Audio section
dnl
dnl default(d):	auto selection
dnl oss(d):	OSS /dev/dsp
dnl alsa(d):	ALSA pcm device
dnl sun(d):	SunOS /dev/audio
dnl hpux(d):	HPUX /dev/audio
dnl irix(d):	IRIX audio
dnl mme(d):	OSF/1 MME
dnl sb_dsp(d):	BSD/OS 2.0 /dev/sb_dsp
dnl removed (gl) dnl w32(d):	Windows MMS
dnl alsa(s):	ALSA pcm device
dnl alib(A):	HPUX network audio (Alib)
dnl nas(n):	Network Audio System
dnl esd(e):	EsounD

audio_targets='default oss alsa sun hpux irix mme sb_dsp alib nas esd'

AC_ARG_WITH(nas-library,
  [  --with-nas-library=library  NAS absolute library path (Don't use -laudio)])
AC_ARG_WITH(nas-includes,
  [  --with-nas-includes=DIR     NAS include files are in dir])


AC_ARG_ENABLE(audio,
  [  --enable-audio[=mode_list]  Enable audio (Specify comma separated mode list):
                              default:  Automatically select audio device.
                              oss:  OSS /dev/dsp
                              sun:  SunOS /dev/audio
                              hpux: HPUX /dev/audio
                              irix: IRIX audio library
                              mme:  OSF/1 MME
                              sb_dsp: BSD/OS 2.0 /dev/sb_dsp
                              alsa: ALSA pcm device
                              alib: HPUX network audio (Alib)
                              nas:  NAS - Network Audio System
                              esd:  EsounD],
  [ enable_audio=$enableval
    have_audio_opt=yes ],
  [ enable_audio=yes
    have_audio_opt=no ])

dnl yes -> default
test "x$enable_audio" = xyes && enable_audio=default

if test "x$enable_audio" != xno; then
  for i in `echo $enable_audio | sed 's/,/ /g'`; do
    eval "au_enable_$i=yes"
  done
fi

dnl Turn on default output mode
DEFAULT_PLAYMODE=
AC_ARG_WITH(default-output,
  [  --with-default-output=<mode>  Specify default output mode (optional):
                              default|alsa|alib|nas|esd|wav|au|aiff|list],
  [ if test "$enable_audio" != no; then
      DEFAULT_PLAYMODE=$withval
      eval "au_enable_$DEFAULT_PLAYMODE=yes"
    else
      AC_MSG_WARN(--with-default-output=$withval: audio is not enabled)
    fi])


if test "x$au_enable_default" = xyes; then
  case "$target" in
    *-*-linux*|*-*-freebsd*)
      au_enable_oss=yes
      ;;
    *-*-bsdi2.0)
      au_enable_sb_dsp=yes
      ;;
    *-*-bsdi2.1|*-*-bsdi3.?|*-*-bsdi4.?)
      au_enable_oss=yes
      ;;
    *-*-hpux*)
      au_enable_hpux=yes
      ;;
    *-dec-*)
      au_enable_mme=yes
      ;;
    *irix*)
      au_enable_irix=yes
      ;;
    *-*-sunos4*)
      au_enable_sun=yes
      ;;
    *-*-solaris*)
      au_enable_sun=yes
      ;;
    *-*-netbsd*)
      au_enable_sun=yes
      ;;
    *)
      AC_MSG_WARN(No --enable-audio=default audio for $target)
      ;;
  esac
fi

dnl
dnl oss
dnl
AC_MSG_CHECKING(enable_audio=oss)
if test "x$au_enable_oss" = xyes; then
  EXTRADEFS="$EXTRADEFS -DAU_OSS"
  SYSEXTRAS="$SYSEXTRAS linux_a.c"
  if test "x$ac_cv_header_sys_soundcard_h" = xyes; then
    AC_MSG_RESULT(yes - <sys/soundcard.h>)
  else
    case "$target" in
      *linux*|*freebsd*)
	dnl <linux/soundcard.h> or <machine/soundcard.h>
	AC_MSG_RESULT(yes)
	;;
      *)
	AC_MSG_WARN(<sys/soundcard.h> is not found)
	;;
    esac
  fi
else
  AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(enable_audio=sun)
if test "x$au_enable_sun" = xyes; then
  case "$target" in
    *-*-sunos4*)
      if test -f /usr/demo/SOUND/libaudio.a; then
	CPPFLAGS="$CPPFLAGS -I/usr/demo/SOUND/multimedia"
	EXTRALIBS="$EXTRALIBS /usr/demo/SOUND/libaudio.a"
	AC_MSG_RESULT(yes)
      else
	AC_MSG_RESULT(Notice: libaudio.a is not found [(ignore)])
      fi
      ;;
    *-*-solaris*)
      if test -f /usr/demo/SOUND/lib/libaudio.a; then
	CPPFLAGS="$CPPFLAGS -I/usr/demo/SOUND/include"
	EXTRALIBS="$EXTRALIBS /usr/demo/SOUND/lib/libaudio.a"
	AC_MSG_RESULT(yes)
      else
	AC_MSG_RESULT(Notice: libaudio.a is not found [(ignore)])
      fi
      ;;
    *) 	AC_MSG_RESULT(yes)
      ;;
  esac
  EXTRADEFS="$EXTRADEFS -DAU_SUN"
  SYSEXTRAS="$SYSEXTRAS sun_a.c"  
else
  AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(enable_audio=hpux)
if test "x$au_enable_hpux" = xyes; then
  case "$target" in
    *-*-hpux*) AC_MSG_RESULT(yes) ;;
    *) AC_MSG_WARN(may not work on $target) ;;
  esac
  EXTRADEFS="$EXTRADEFS -DAU_HPUX_AUDIO"
  SYSEXTRAS="$SYSEXTRAS hpux_d_a.c"
else
  AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(enable_audio=irix)
if test "x$au_enable_irix" = xyes; then
  case "$target" in
    *-sgi-irix5*|*-sgi-irix6.2)
      EXTRADEFS="$EXTRADEFS -DAU_AUDRIV -DSGI_OLDAL"
      AC_MSG_RESULT(yes)
      ;;
    *-sgi-irix6*)
      EXTRADEFS="$EXTRADEFS -DAU_AUDRIV -DSGI_NEWAL"
      AC_MSG_RESULT(yes)
      ;;
    *) AC_MSG_WARN(may not work on $target) ;;
  esac
  SYSEXTRAS="$SYSEXTRAS audriv_a.c audriv_al.c"
  EXTRALIBS="$EXTRALIBS -laudio"
else
  AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(enable_audio=mme)
if test "x$au_enable_mme" = xyes; then
  case "$target" in
    *-dec-*) AC_MSG_RESULT(yes) ;;
    *) AC_MSG_WARN(may not work on $target) ;;
  esac
  EXTRADEFS="$EXTRADEFS -DAU_DEC -DAU_AUDRIV"
  SYSEXTRAS="$SYSEXTRAS audriv_a.c audriv_mme.c"
  CPPFLAGS="$CPPFLAGS -I/usr/include/mme -I/usr/opt/MME210/include"
  EXTRALIBS="$EXTRALIBS -L/usr/opt/MME220/lib -lmme"
else
  AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(enable_audio=sb_dsp)
if test "x$au_enable_sb_dsp" = xyes; then
  case "$target" in
    *-*-bsdi2.0) AC_MSG_RESULT(yes) ;;
    *) AC_MSG_WARN(may not work on $target) ;;
  esac
  EXTRADEFS="$EXTRADEFS -DAU_BSDI -DDEFAULT_RATE=22500"
  SYSEXTRAS="$SYSEXTRAS bsd20_a.c"
else
  AC_MSG_RESULT(no)
fi

dnl AC_MSG_CHECKING(enable_audio=w32)
dnl if test "x$au_enable_w32" = xyes; then
dnl   case "$target" in
dnl     *-*-cygwin32*)
dnl      if test "x$enable_w32gui" = xyes; then
dnl 	SYSEXTRAS="$SYSEXTRAS w32g_a.c"
dnl      else
dnl 	SYSEXTRAS="$SYSEXTRAS w32_a.c"
dnl      fi
dnl      AC_MSG_RESULT(yes)
dnl      ;;
dnl    *)
dnl      AC_MSG_WARN(may not work on $target)
dnl      SYSEXTRAS="$SYSEXTRAS w32_a.c"
dnl      ;;
dnl   esac
dnl   EXTRALIBS="$EXTRALIBS -lwinmm"
dnl   EXTRADEFS="$EXTRADEFS -DAU_W32"
dnl else
dnl   AC_MSG_RESULT(no)
dnl fi

AC_MSG_CHECKING(enable_audio=alsa)
if test "x$au_enable_alsa" = xyes; then
  AC_MSG_RESULT()
  KEEPCFLAGS=$CFLAGS
  KEEPLIBS=$LIBS
  KEEPLDFLAGS=$LDFLAGS
  AM_PATH_ALSA_LOCAL()
  if test have_alsa = no; then
    AC_MSG_WARN(ALSA: Couldn't configure)
    CFLAGS=$KEEPCFLAGS
    LIBS=$KEEPLIBS
    LDFLAGS=$KEEPLDFLAGS
  else
    AC_MSG_RESULT(ALSA: Enabled)
    EXTRADEFS="$EXTRADEFS -DAU_ALSA"
    SYSEXTRAS="$SYSEXTRAS alsa_a.c"
    EXTRACT_CPPFLAGS(CPPFLAGS,CFLAGS,$ALSA_CFLAGS)
    LIBS="$LIBS $ALSA_LIBS"
  fi
else
  AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(enable_audio=alib)
if test "x$au_enable_alib" = xyes; then
  case "$target" in
    *-*-hpux*) AC_MSG_RESULT(yes) ;;
    *) AC_MSG_WARN(may not work on $target) ;;
  esac
  SYSEXTRAS="$SYSEXTRAS hpux_a.c"
  EXTRADEFS="$EXTRADEFS -DAU_HPUX_ALIB"
  if test -d /opt/audio/include; then
    CPPFLAGS="$CPPFLAGS -I/opt/audio/include"
  fi
  if test -d /opt/audio/lib; then
    EXTRALIBS="$EXTRALIBS -L/opt/audio/lib"
  fi
  EXTRALIBS="$EXTRALIBS -lAlib"
else
  AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(enable_audio=nas)
if test "x$au_enable_nas" = xyes; then
  if test "x$with_x" != xyes; then
    AC_MSG_ERROR(nas: --with-x option must be specified)
  fi
  EXTRADEFS="$EXTRADEFS -DAU_NAS"
  SYSEXTRAS="$SYSEXTRAS nas_a.c"

  dnl -laudio conflicts another audio library,
  dnl so I specify NAS library with absolete path.

  if test "x$with_nas_library" != x; then
    AC_MSG_RESULT($with_nas_library);
    EXTRALIBS="$EXTRALIBS $with_nas_library"
  else
    AC_MSG_RESULT()
    MY_SEARCH_LIBS(AuOpenServer,
	[$x_libraries/libaudio.a \
	/usr/lib/libaudio.so \
	/usr/lib/libaudio.a ],
	[ AC_MSG_RESULT(NAS: $timidity_cv_search_AuOpenServer)
	  EXTRALIBS="$EXTRALIBS $timidity_cv_search_AuOpenServer"],
	[AC_MSG_WARN(NAS library is not found.)])
  fi
  test "x$with_nas_includes" != x && CPPFLAGS="$CPPFLAGS -I$with_nas_includes"
  lib_xt_opt=-lXt
  if test "x$have_xext" = xyes; then
    lib_xext_opt=-lXext
  fi
  if test "x$have_xprelibs" = xyes; then
    lib_xprelibs_opt='-lSM -lICE'
  fi
else
  AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(enable_audio=esd)
if test "x$au_enable_esd" = xyes; then
  AC_MSG_RESULT()
  KEEPCFLAGS=$CFLAGS
  KEEPLIBS=$LIBS
  KEEPLDFLAGS=$LDFLAGS
  AM_PATH_ESD()
  CFLAGS=$KEEPCFLAGS
  LIBS=$KEEPLIBS
  LDFLAGS=$KEEPLDFLAGS
  if test "x$no_esd" = x; then
    AC_MSG_RESULT(EsounD: Enabled)
    EXTRADEFS="$EXTRADEFS -DAU_ESD"
    SYSEXTRAS="$SYSEXTRAS esd_a.c"
    EXTRACT_CPPFLAGS(CPPFLAGS,CFLAGS,$ESD_CFLAGS)
    LIBS="$LIBS $ESD_LIBS"
  else
    AC_MSG_WARN(EsounD: Couldn't configure)
  fi
else
  AC_MSG_RESULT(no)
fi

dnl Pseudo audio device (Undocumented).
dnl if test "x$au_enable_none" = xyes; then
dnl     EXTRADEFS="$EXTRADEFS -DAU_NONE -DAU_AUDRIV"
dnl     SYSEXTRAS="$SYSEXTRAS audriv_a.c audriv_none.c"
dnl fi


dnl
dnl TIMIDITY_OUTPUT_ID
dnl
dnl AC_MSG_CHECKING(default output mode)
dnl if test "x$DEFAULT_PLAYMODE" = x; then
dnl   DEFAULT_PLAYMODE=`echo $enable_audio | sed 's/,.*//'`
dnl fi
dnl case ".$DEFAULT_PLAYMODE" in
dnl   .default)  TIMIDITY_OUTPUT_ID=d ;;
dnl   .oss)  TIMIDITY_OUTPUT_ID=d ;;
dnl   .alsa) TIMIDITY_OUTPUT_ID=s ;;
dnl   .sun)  TIMIDITY_OUTPUT_ID=d ;;
dnl   .hpux)  TIMIDITY_OUTPUT_ID=d ;;
dnl   .irix)  TIMIDITY_OUTPUT_ID=d ;;
dnl   .mme)  TIMIDITY_OUTPUT_ID=d ;;
dnl   .sb_dsp)  TIMIDITY_OUTPUT_ID=d ;;
dnl   .w32)  TIMIDITY_OUTPUT_ID=d ;;
dnl   .alib) TIMIDITY_OUTPUT_ID=A ;;
dnl   .nas)  TIMIDITY_OUTPUT_ID=n ;;
dnl   .esd)  TIMIDITY_OUTPUT_ID=e ;;
dnl   .wav)  TIMIDITY_OUTPUT_ID=w ;;
dnl   .au)   TIMIDITY_OUTPUT_ID=u ;;
dnl   .aiff) TIMIDITY_OUTPUT_ID=a ;;
dnl   .list) TIMIDITY_OUTPUT_ID=l ;;
dnl   *)     TIMIDITY_OUTPUT_ID= ;;
dnl esac
dnl AC_MSG_RESULT($DEFAULT_PLAYMODE/$TIMIDITY_OUTPUT_ID)

AC_SUBST_KMIDI
