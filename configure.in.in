dnl Template file for GNU Autoconf
dnl Process this file with autoconf to produce a configure script.
dnl (C)Copyright 1998 by Hiroshi Takekawa <t80679@hongo.ecc.u-tokyo.ac.jp>

dnl modified for automake by Isaku Yamahata <yamahata@kusm.kyoto-u.ac.jp>
dnl modified for automake by Masanao Izumo <mo@goice.co.jp> (1998.11)


EXTRACFLAGS=
EXTRATCFLAGS=
EXTRADEFS=
EXTRALIBS=
EXTRATDEFS=
EXTRATLIBS=


WISH=${WISH:-wish}
tcltk_dep=

dnl Which X libraries?
dnl  KEEPLIBS=$LIBS
dnl  AC_CHECK_LIB(Xext,XShapeCombineMask,have_xext=yes; LIBS="-lXext $LIBS",
dnl    have_xext=no)
dnl  AC_CHECK_LIB(ICE,IceConnectionNumber)
dnl  AC_CHECK_LIB(SM,SmcOpenConnection,have_xprelibs=yes; LIBS="-lSM $LIBS",
dnl    have_xprelibs=no)
dnl  AC_CHECK_LIB(Xt,XtVaAppInitialize,have_xt=yes; LIBS="-lXt $LIBS",have_xt=no)
dnl  AC_CHECK_LIB(Xmu,XmuInternAtom,LIBS="-lXmu $LIBS")
dnl  AC_CHECK_FUNCS(XmuRegisterExternalAgent)
dnl  AC_CHECK_LIB(Xaw3d,XawInitializeWidgetSet,have_xaw=3d,
dnl   [ AC_CHECK_LIB(Xaw,XawInitializeWidgetSet,have_xaw=yes,have_xaw=no) ])
dnl  AC_CHECK_LIB(Xm,XmCreateForm,have_xm=yes,have_xm=no)
dnl  AC_CHECK_FUNCS(XShmCreatePixmap)
dnl  LIBS=$KEEPLIBS


dnl tcltk path
AC_ARG_WITH(tcl-includes,
  [  --with-tcl-includes=DIR Tcl include file path ],
  [ if test ! -d $withval; then
      AC_MSG_WARN($withval is not found.)
    fi
    tcl_include_dir="-I$withval"
  ])
AC_ARG_WITH(tcl-libs,
  [  --with-tcl-libs=DIR     Tcl library file path ],
  [ if test ! -d $withval; then
      AC_MSG_WARN($withval is not found.)
    fi
    tcl_libdir="-L$withval" ])
AC_ARG_WITH(tk-includes,
  [  --with-tk-includes=DIR  Tk include file path ],
  [ if test ! -d $withval; then
      AC_MSG_WARN($withval is not found.)
    fi
    tk_includes="-I$withval" ])
AC_ARG_WITH(tk-libs,
  [  --with-tk-libs=DIR      Tk library file path ],
  [ if test ! -d $withval; then
      AC_MSG_WARN($withval is not found.)
    fi
    tk_libdir="-L$withval" ])

dnl AC_CHECK_HEADER(string.h,, [ EXTRADEFS="$EXTRADEFS -DNO_STRING_H " ])

dnl AC_CHECK_HEADERS(ncurses/curses.h ncurses.h slang/slang.h slang.h)

dnl AC_CHECK_LIB(ncurses,initscr, [ EXTRALIBS="$EXTRALIBS -lncurses " EXTRADEFS="$EXTRADEFS -DIA_NCURSES "])
dnl AC_CHECK_LIB(slang,SLang_init_tty, [ EXTRALIBS="$EXTRALIBS -lslang " EXTRADEFS="$EXTRADEFS -DIA_SLANG "])

dnl
dnl Audio section
dnl
dnl default(d):	auto selection
dnl oss(d):	OSS /dev/dsp
dnl alsa(d):	ALSA pcm device
dnl sun(d):	SunOS /dev/audio
dnl hpux(d):	HPUX /dev/audio
dnl irix(d):	IRIX audio
dnl mme(d):	OSF/1 MME
dnl sb_dsp(d):	BSD/OS 2.0 /dev/sb_dsp
dnl removed (gl) dnl w32(d):	Windows MMS
dnl alsa(s):	ALSA pcm device
dnl alib(A):	HPUX network audio (Alib)
dnl nas(n):	Network Audio System
dnl esd(e):	EsounD

audio_targets='default oss alsa sun hpux irix mme sb_dsp alib nas esd'

AC_ARG_WITH(nas-library,
  [  --with-nas-library=library  NAS absolute library path (Don't use -laudio)])
AC_ARG_WITH(nas-includes,
  [  --with-nas-includes=DIR     NAS include files are in dir])


AC_ARG_ENABLE(audio,
  [  --enable-audio[=mode_list]  Enable audio (Specify comma separated mode list):
                              default:  Automatically select audio device.
                              oss:  OSS /dev/dsp
                              sun:  SunOS /dev/audio
                              hpux: HPUX /dev/audio
                              irix: IRIX audio library
                              mme:  OSF/1 MME
                              sb_dsp: BSD/OS 2.0 /dev/sb_dsp
                              alsa: ALSA pcm device
                              alib: HPUX network audio (Alib)
                              nas:  NAS - Network Audio System
                              esd:  EsounD],
  [ enable_audio=$enableval
    have_audio_opt=yes ],
  [ enable_audio=yes
    have_audio_opt=no ])

dnl yes -> default
test "x$enable_audio" = xyes && enable_audio=default

if test "x$enable_audio" != xno; then
  for i in `echo $enable_audio | sed 's/,/ /g'`; do
    eval "au_enable_$i=yes"
  done
fi

dnl Turn on default output mode
DEFAULT_PLAYMODE=
AC_ARG_WITH(default-output,
  [  --with-default-output=<mode>  Specify default output mode for KMidi (optional):
                              default|alsa|alib|nas|esd|wav|au|aiff|list],
  [ if test "$enable_audio" != no; then
      DEFAULT_PLAYMODE=$withval
      eval "au_enable_$DEFAULT_PLAYMODE=yes"
    else
      AC_MSG_WARN(--with-default-output=$withval: audio is not enabled)
    fi])


if test "x$au_enable_default" = xyes; then
  case "$target" in
    *-*-linux*|*-*-freebsd*)
      au_enable_oss=yes
      ;;
    *-*-bsdi2.0)
      au_enable_sb_dsp=yes
      ;;
    *-*-bsdi2.1|*-*-bsdi3.?|*-*-bsdi4.?)
      au_enable_oss=yes
      ;;
    *-*-hpux*)
      au_enable_hpux=yes
      ;;
    *-dec-*)
      au_enable_mme=yes
      ;;
    *irix*)
      au_enable_irix=yes
      ;;
    *-*-sunos4*)
      au_enable_sun=yes
      ;;
    *-*-solaris*)
      au_enable_sun=yes
      ;;
    *-*-netbsd*)
      au_enable_sun=yes
      ;;
    *)
      AC_MSG_WARN(No --enable-audio=default audio for $target)
      ;;
  esac
fi

dnl
dnl oss
dnl
AC_MSG_CHECKING(enable_audio=oss)
if test "x$au_enable_oss" = xyes; then
  EXTRADEFS="$EXTRADEFS -DAU_OSS"
  if test "x$ac_cv_header_sys_soundcard_h" = xyes; then
    AC_MSG_RESULT(yes - <sys/soundcard.h>)
  else
    case "$target" in
      *linux*|*freebsd*)
	dnl <linux/soundcard.h> or <machine/soundcard.h>
	AC_MSG_RESULT(yes)
	;;
      *)
	AC_MSG_WARN(<sys/soundcard.h> is not found)
	;;
    esac
  fi
else
  AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(enable_audio=sun)
if test "x$au_enable_sun" = xyes; then
  case "$target" in
    *-*-sunos4*)
      if test -f /usr/demo/SOUND/libaudio.a; then
	CPPFLAGS="$CPPFLAGS -I/usr/demo/SOUND/multimedia"
	EXTRALIBS="$EXTRALIBS /usr/demo/SOUND/libaudio.a"
	AC_MSG_RESULT(yes)
      else
	AC_MSG_RESULT(Notice: libaudio.a is not found [(ignore)])
      fi
      ;;
    *-*-solaris*)
      if test -f /usr/demo/SOUND/lib/libaudio.a; then
	CPPFLAGS="$CPPFLAGS -I/usr/demo/SOUND/include"
	EXTRALIBS="$EXTRALIBS /usr/demo/SOUND/lib/libaudio.a"
	AC_MSG_RESULT(yes)
      else
	AC_MSG_RESULT(Notice: libaudio.a is not found [(ignore)])
      fi
      ;;
    *) 	AC_MSG_RESULT(yes)
      ;;
  esac
  EXTRADEFS="$EXTRADEFS -DAU_SUN"
else
  AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(enable_audio=hpux)
if test "x$au_enable_hpux" = xyes; then
  case "$target" in
    *-*-hpux*) AC_MSG_RESULT(yes) ;;
    *) AC_MSG_WARN(may not work on $target) ;;
  esac
  EXTRADEFS="$EXTRADEFS -DAU_HPUX_AUDIO"
else
  AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(enable_audio=irix)
if test "x$au_enable_irix" = xyes; then
  case "$target" in
    *-sgi-irix5*|*-sgi-irix6.2)
      EXTRADEFS="$EXTRADEFS -DAU_AUDRIV -DSGI_OLDAL"
      AC_MSG_RESULT(yes)
      ;;
    *-sgi-irix6*)
      EXTRADEFS="$EXTRADEFS -DAU_AUDRIV -DSGI_NEWAL"
      AC_MSG_RESULT(yes)
      ;;
    *) AC_MSG_WARN(may not work on $target) ;;
  esac
  EXTRALIBS="$EXTRALIBS -laudio"
else
  AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(enable_audio=mme)
if test "x$au_enable_mme" = xyes; then
  case "$target" in
    *-dec-*) AC_MSG_RESULT(yes) ;;
    *) AC_MSG_WARN(may not work on $target) ;;
  esac
  EXTRADEFS="$EXTRADEFS -DAU_DEC -DAU_AUDRIV"
  CPPFLAGS="$CPPFLAGS -I/usr/include/mme -I/usr/opt/MME210/include"
  EXTRALIBS="$EXTRALIBS -L/usr/opt/MME220/lib -lmme"
else
  AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(enable_audio=sb_dsp)
if test "x$au_enable_sb_dsp" = xyes; then
  case "$target" in
    *-*-bsdi2.0) AC_MSG_RESULT(yes) ;;
    *) AC_MSG_WARN(may not work on $target) ;;
  esac
  EXTRADEFS="$EXTRADEFS -DAU_BSDI -DDEFAULT_RATE=22500"
else
  AC_MSG_RESULT(no)
fi


AC_MSG_CHECKING(enable_audio=alsa)
if test "x$au_enable_alsa" = xyes; then
  AC_MSG_RESULT()
  KEEPCFLAGS=$CFLAGS
  KEEPLIBS=$LIBS
  KEEPLDFLAGS=$LDFLAGS
  AM_PATH_ALSA_LOCAL()
  if test have_alsa = no; then
    AC_MSG_WARN(ALSA: Couldn't configure)
    CFLAGS=$KEEPCFLAGS
    LIBS=$KEEPLIBS
    LDFLAGS=$KEEPLDFLAGS
  else
    AC_MSG_RESULT(ALSA: Enabled)
    EXTRADEFS="$EXTRADEFS -DAU_ALSA"
    EXTRALIBS="$EXTRALIBS $ALSA_LIBS"
    EXTRACT_CPPFLAGS(CPPFLAGS,CFLAGS,$ALSA_CFLAGS)
    LIBS="$LIBS $ALSA_LIBS"
  fi
else
  AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(enable_audio=alib)
if test "x$au_enable_alib" = xyes; then
  case "$target" in
    *-*-hpux*) AC_MSG_RESULT(yes) ;;
    *) AC_MSG_WARN(may not work on $target) ;;
  esac
  EXTRADEFS="$EXTRADEFS -DAU_HPUX_ALIB"
  if test -d /opt/audio/include; then
    CPPFLAGS="$CPPFLAGS -I/opt/audio/include"
  fi
  if test -d /opt/audio/lib; then
    EXTRALIBS="$EXTRALIBS -L/opt/audio/lib"
  fi
  EXTRALIBS="$EXTRALIBS -lAlib"
else
  AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(enable_audio=nas)
if test "x$au_enable_nas" = xyes; then
  if test "x$with_x" != xyes; then
    AC_MSG_ERROR(nas: --with-x option must be specified)
  fi
  EXTRADEFS="$EXTRADEFS -DAU_NAS"

  dnl -laudio conflicts another audio library,
  dnl so I specify NAS library with absolete path.

  if test "x$with_nas_library" != x; then
    AC_MSG_RESULT($with_nas_library);
    EXTRALIBS="$EXTRALIBS $with_nas_library"
  else
    AC_MSG_RESULT()
    MY_SEARCH_LIBS(AuOpenServer,
	[$x_libraries/libaudio.a \
	/usr/lib/libaudio.so \
	/usr/lib/libaudio.a ],
	[ AC_MSG_RESULT(NAS: $timidity_cv_search_AuOpenServer)
	  EXTRALIBS="$EXTRALIBS $timidity_cv_search_AuOpenServer"],
	[AC_MSG_WARN(NAS library is not found.)])
  fi
  test "x$with_nas_includes" != x && CPPFLAGS="$CPPFLAGS -I$with_nas_includes"
  lib_xt_opt=-lXt
  if test "x$have_xext" = xyes; then
    lib_xext_opt=-lXext
  fi
  if test "x$have_xprelibs" = xyes; then
    lib_xprelibs_opt='-lSM -lICE'
  fi
else
  AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(enable_audio=esd)
if test "x$au_enable_esd" = xyes; then
  AC_MSG_RESULT()
  KEEPCFLAGS=$CFLAGS
  KEEPLIBS=$LIBS
  KEEPLDFLAGS=$LDFLAGS
  AM_PATH_ESD()
  CFLAGS=$KEEPCFLAGS
  LIBS=$KEEPLIBS
  LDFLAGS=$KEEPLDFLAGS
  if test "x$no_esd" = x; then
    AC_MSG_RESULT(EsounD: Enabled)
    EXTRADEFS="$EXTRADEFS -DAU_ESD"
    EXTRACT_CPPFLAGS(CPPFLAGS,CFLAGS,$ESD_CFLAGS)
    LIBS="$LIBS $ESD_LIBS"
  else
    AC_MSG_WARN(EsounD: Couldn't configure)
  fi
else
  AC_MSG_RESULT(no)
fi

dnl
dnl TIMIDITY_OUTPUT_ID
dnl
dnl AC_MSG_CHECKING(default output mode)
dnl if test "x$DEFAULT_PLAYMODE" = x; then
dnl   DEFAULT_PLAYMODE=`echo $enable_audio | sed 's/,.*//'`
dnl fi
dnl case ".$DEFAULT_PLAYMODE" in
dnl   .default)  TIMIDITY_OUTPUT_ID=d ;;
dnl   .oss)  TIMIDITY_OUTPUT_ID=d ;;
dnl   .alsa) TIMIDITY_OUTPUT_ID=s ;;
dnl   .sun)  TIMIDITY_OUTPUT_ID=d ;;
dnl   .hpux)  TIMIDITY_OUTPUT_ID=d ;;
dnl   .irix)  TIMIDITY_OUTPUT_ID=d ;;
dnl   .mme)  TIMIDITY_OUTPUT_ID=d ;;
dnl   .sb_dsp)  TIMIDITY_OUTPUT_ID=d ;;
dnl   .w32)  TIMIDITY_OUTPUT_ID=d ;;
dnl   .alib) TIMIDITY_OUTPUT_ID=A ;;
dnl   .nas)  TIMIDITY_OUTPUT_ID=n ;;
dnl   .esd)  TIMIDITY_OUTPUT_ID=e ;;
dnl   .wav)  TIMIDITY_OUTPUT_ID=w ;;
dnl   .au)   TIMIDITY_OUTPUT_ID=u ;;
dnl   .aiff) TIMIDITY_OUTPUT_ID=a ;;
dnl   .list) TIMIDITY_OUTPUT_ID=l ;;
dnl   *)     TIMIDITY_OUTPUT_ID= ;;
dnl esac
dnl AC_MSG_RESULT($DEFAULT_PLAYMODE/$TIMIDITY_OUTPUT_ID)


dnl
dnl Interface section
dnl

interface_targets='ncurses slang motif tcltk xaw gtk'

enable_ncurses=yes
enable_slang=yes
enable_motif=yes
enable_tcltk=yes
enable_xaw=yes
enable_gtk=yes

AC_ARG_ENABLE(interface,
  [  --enable-interface=[interface_list]  Comma separated KMidi/timidity interface list ],
  [
    enable_ncurses=no
    enable_slang=no
    enable_motif=no
    enable_tcltk=no
    enable_xaw=no
    enable_gtk=no
    for i in `echo $enableval | sed 's/,/ /g'`; do
      eval "enable_$i=yes"
    done ])


dnl
dnl Each interface section
dnl

dnl ncurses
CONFIG_INTERFACE(ncurses,NCURSES,n,
  [  --enable-ncurses        Enable ncurses interface        (default is yes)],
  [ AC_CHECK_HEADERS(ncurses.h ncurses/curses.h curses.h)

dnl #include <ncurses/curses.h> is failure on Plamo Linux 1.3/ncurses 1.9.9e
dnl because <ncurses/curses.h> includes <unctrl.h>:
dnl /usr/include/ncurses/curses.h:34: unctrl.h: No such file or directory
dnl But surely there is unctl.h at /usr/include/ncurses/unctrl.h.
dnl configure must check ncurses header with -I/usr/include/ncurses option.

    case "$ac_cv_header_curses_h$ac_cv_header_ncurses_curses_h$ac_cv_header_ncurses_h" in
    *yes*);;
    *)	for i in /usr/include /usr/local/include; do
	if test -f "$i/ncurses/curses.h" -a -f "$i/ncurses/unctrl.h"; then
	    AC_MSG_WARN(ncurses test is failure.  Please check config.h and common.makefile later)
	    CPPFLAGS="$CPPFLAGS -I$i/ncurses"
	    break
	fi
	done
	;;
    esac

    AC_CHECK_LIB(ncurses,initscr,lib_curses_opt=-lncurses,
	[ dnl checking pdcurses
	  AC_CHECK_LIB(curses,PDC_set_ctrl_break,
		[ lib_curses_opt=-lcurses
		  CPPFLAGS="$CPPFLAGS -DUSE_PDCURSES=1"
		  lib_user32_opt="$lib_user32_test"
		],
		[ AC_MSG_WARN(ncurses interface is not enabled) 
		  enable_ncurses=no
		],
		$lib_user32_test)
	])
   LIBS="$LIBS $lib_curses_opt"
   EXTRALIBS="$EXTRALIBS $lib_curses_opt"
   EXTRADEFS="$EXTRADEFS -DIA_NCURSES"
    case "$target" in
      *-*-freebsd*)
        EXTRALIBS="$EXTRALIBS -lmytinfo"
        ;;
    esac
  ])


dnl slang
CONFIG_INTERFACE(slang,SLANG,s,
  [  --enable-slang          Enable slang interface          (default is yes)],
  [ AC_CHECK_LIB(slang,SLang_init_tty,:,
	[ enable_slang=no
	  AC_MSG_WARN(slang interface is not enabled) ])
    AC_CHECK_HEADERS(slang/slang.h slang.h)
    LIBS="$LIBS -lslang"
    EXTRALIBS="$EXTRALIBS -lslang"
    EXTRADEFS="$EXTRADEFS -DIA_SLANG"
   ])


dnl Motif
CONFIG_INTERFACE(motif,MOTIF,m,
  [  --enable-motif          Enable motif interface for TiMidity (default is yes)],
  [
dnl    lib_xm_opt=-lXm
dnl    lib_xt_opt=-lXt
dnl    lib_xext_opt=-lXext
dnl    if test "x$have_xprelibs" = xyes; then
dnl	lib_xprelibs_opt='-lSM -lICE'
dnl    fi
    EXTRATDEFS="$EXTRATDEFS -DIA_MOTIF"
    EXTRATLIBS="$EXTRATLIBS -L/usr/X11R6/lib -lXm -lXt -lX11"
  ])


dnl Tcl/Tk
CONFIG_INTERFACE(tcltk,TCLTK,k,
  [  --enable-tcltk          Enable tcltk interface for TiMidity  (default is yes)],
  [
    KEEPCPPFLAGS=$CPPFLAGS
    KEEPLDFLAGS=$LDFLAGS
    KEEPLIBS=$LIBS

    CPPFLAGS="$tcl_include_dir $tk_includes $CPPFLAGS"
    LDFLAGS="$tcl_libdir $tk_libdir $LDFLAGS"
    LIBS="$LIBS $lib_dl_opt"

    tcl_lib=
    tk_lib=
    for l in tcl tcl8.0jp tcl7.6jp tcl80jp tcl76jp tcl8.0 tcl7.6 tcl80 tcl76; do
      case "x$tcl_lib" in x) AC_CHECK_LIB($l,Tcl_Init,tcl_lib=-l$l);; esac
    done
    LIBS="$LIBS $tcl_lib"
    for l in tk tk8.0jp tk4.2jp tk80jp tk42jp tk8.0 tk4.2 tk80 tk42; do
      case "x$tk_lib" in x) AC_CHECK_LIB($l,Tk_Init,tk_lib=-l$l);; esac
    done


    LIBS=$KEEPLIBS
    if test "x$tcl_lib" = x -o "x$tk_lib" = x; then
      CPPFLAGS=$KEEPCPPFLAGS
      LDFLAGS=$KEEPLDFLAGS
      enable_tcltk=no
      AC_MSG_WARN(tcl/tk is not enable)
    else
      tcltk_dep='tclIndex'
    fi
    LIBS=`echo $LIBS | sed "s/-lX11/$tk_lib $tcl_lib -lX11/"`
    EXTRATLIBS=`echo $EXTRATLIBS | sed "s/-lX11/$tk_lib $tcl_lib -lX11/"`
    case "$target" in
      *-*-bsdi*)
        EXTRATLIBS="$EXTRATLIBS -lipc"
        ;;
    esac
    EXTRATDEFS="$EXTRATDEFS -DTCLTK"
  ])


dnl X Athena Widget
CONFIG_INTERFACE(xaw,XAW,a,
  [  --enable-xaw            Enable athena interface for TiMidity (default is yes)],
  [
dnl    if test "x$have_xaw" != "xyes" -a "x$have_xaw" != "x3d"; then
dnl      AC_MSG_WARN(X Athena 3D Widget library is not found.)
dnl      enable_xaw=no
dnl    fi 
    dnl Add -lXext -lSM -lICE -lXmu -lXt {-lXaw|-lXaw3d}
dnl    if test "x$have_xext" = xyes; then
dnl      lib_xext_opt=-lXext
dnl    fi
dnl    if test "x$have_xprelibs" = xyes; then
dnl      lib_xprelibs_opt='-lSM -lICE'
dnl    fi
dnl    lib_xmu_opt=-lXmu
dnl    lib_xt_opt=-lXt
dnl    if test "x$have_xaw" = x3d; then
dnl      EXTRADEFS="$EXTRADEFS -DXAW3D"
dnl      lib_xaw_opt=-lXaw3d
dnl    else
dnl      lib_xaw_opt=-lXaw
dnl    fi
    EXTRATDEFS="$EXTRATDEFS -DIA_XAW"
    EXTRATLIBS="$EXTRATLIBS -L/usr/X11R6 -lXaw -lXt -lX11"
dnl    if test "x$have_xext" = xyes; then
dnl      a_so_libs="-lXext -lX11"
dnl    else
dnl      a_so_libs="-lX11"
dnl    fi
dnl    if test "x$have_xprelibs" = xyes; then
dnl      a_so_libs="-lSM -lICE $a_so_libs"
dnl    fi
dnl    if test "x$have_xaw" = xyes; then
dnl      a_so_libs="-lXaw -lXmu -lXt $a_so_libs"
dnl    elif test "x$have_xaw" = x3d; then
dnl      EXTRADEFS="$EXTRADEFS -DXAW3D"
dnl      a_so_libs="-lXaw3d -lXmu -lXt $a_so_libs"
dnl    fi
dnl    a_so_libs="$ldflags_x_opt $a_so_libs"
  ])


dnl GTK+
CONFIG_INTERFACE(gtk, GTK, g,
  [  --enable-gtk            Enable GTK+ interface for TiMidity (default is yes)],
  [
    AM_PATH_GLIB(1.1.3,
    [ AM_PATH_GTK(1.1.3,
      [ LIBS="$LIBS $GTK_LIBS $GLIB_LIBS "
        EXTRATLIBS="$EXTRATLIBS $GTK_LIBS $GLIB_LIBS "
        EXTRACT_CPPFLAGS(EXTRATCFLAGS,CFLAGS,$GLIB_CFLAGS)
        EXTRACT_CPPFLAGS(EXTRATCFLAGS,CFLAGS,$GTK_CFLAGS)
        EXTRATDEFS="$EXTRATDEFS -DIA_GTK" ],
      enable_gtk=no) ],
    enable_gtk=no)
  ])


KMIDI_OPTIMIZE

EXTRATDEFS="$EXTRADEFS $EXTRATDEFS"
EXTRATCFLAGS="$CPPFLAGS $EXTRATCFLAGS"

AC_SUBST_KMIDI
